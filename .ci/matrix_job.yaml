---
job: LIBXLIO

step_allow_single_selector: false

registry_host: harbor.mellanox.com
registry_auth: 1daaea28-800e-425f-a91f-3bd3e9136eea
registry_path: /swx-infra/media

kubernetes:
  privileged: false
  cloud: swx-k8s-spray
  nodeSelector: 'beta.kubernetes.io/os=linux'
  namespace: xlio-ci
  limits: '{memory: 8Gi, cpu: 7000m}'
  requests: '{memory: 8Gi, cpu: 7000m}'

credentials:
  - {credentialsId: '925b0900-e273-4042-bc7c-facaefae0727', usernameVariable: 'XLIO_COV_USER', passwordVariable: 'XLIO_COV_PASSWORD'}

volumes:
  - {mountPath: /hpc/local/bin, hostPath: /hpc/local/bin}
  - {mountPath: /hpc/local/oss, hostPath: /hpc/local/oss}
  - {mountPath: /hpc/local/oss/xlio, hostPath: /hpc/local/oss/xlio}
  - {mountPath: /auto/sw_tools/Commercial, hostPath: /auto/sw_tools/Commercial}
  - {mountPath: /hpc/local/commercial, hostPath: /hpc/local/commercial}
  - {mountPath: /hpc/local/etc/modulefiles, hostPath: /hpc/local/etc/modulefiles}
  # for Antivirus
  - {mountPath: /auto/BACKUP/logs_of_LOGS, hostPath: /auto/BACKUP/logs_of_LOGS}
  - {mountPath: /auto/GLIT/SCRIPTS/HELPERS, hostPath: /auto/GLIT/SCRIPTS/HELPERS}
  # Default release location
  - {mountPath: /auto/sw/release/sw_acceleration, hostPath: /auto/sw/release/sw_acceleration}
  # User profile for release
  - {mountPath: /var/home/swx-jenkins, hostPath: /labhome/swx-jenkins}

runs_on_dockers:
# mofed
  - {name: 'ub20.04-mofed-x86_64', url: 'harbor.mellanox.com/swx-infra/x86_64/ubuntu20.04/builder:mofed-5.2-2.2.0.0', category: 'base', arch: 'x86_64'}
  - {name: 'ub20.04-mofed-aarch64', url: 'harbor.mellanox.com/swx-infra/aarch64/ubuntu20.04/builder:mofed-5.2-1.0.4.0', category: 'base', arch: 'aarch64'}
  - {name: 'ub22.04-mofed-x86_64', url: 'harbor.mellanox.com/hpcx/x86_64/ubuntu22.04/builder:mofed-5.7-0.1.1.0', category: 'base', arch: 'x86_64'}
  - {name: 'rhel8.6-mofed-x86_64',  url: 'harbor.mellanox.com/hpcx/x86_64/rhel8.6/builder:mofed-5.6-0.4.5.0', category: 'base', arch: 'x86_64'}
#  - {name: 'oracle8.6-mofed-x86_64',  url: 'harbor.mellanox.com/rivermax/base_oraclelinux8.6:mofed-5.9-0.3.4.0', category: 'base', arch: 'x86_64'}
# tool
  - {name: 'toolbox', url: 'harbor.mellanox.com/hpcx/x86_64/rhel8.6/builder:inbox', category: 'tool', arch: 'x86_64'}
  - {name: 'blackduck', url: 'harbor.mellanox.com/toolbox/ngci-centos:7.9.2009.2', category: 'tool', arch: 'x86_64'}
  - {name: 'header-check', url: 'harbor.mellanox.com/toolbox/header_check:0.0.14', category: 'tool', arch: 'x86_64', tag: '0.0.14'}
# static tests
  - {file: '.ci/dockerfiles/Dockerfile.rhel8.6',
     arch: 'x86_64',
     name: 'xlio_static.cppcheck',
     uri: '$arch/$name',
     tag: '20240703',
     build_args: '--no-cache',
     category: 'tool'
     }
  - {file: '.ci/dockerfiles/Dockerfile.rhel8.6',
     arch: 'x86_64',
     name: 'xlio_static.csbuild',
     uri: '$arch/$name',
     tag: '20240703',
     build_args: '--no-cache',
     category: 'tool'
     }
  - {file: '.ci/dockerfiles/Dockerfile.rhel8.6',
     arch: 'x86_64',
     name: 'xlio_static.tidy',
     uri: '$arch/$name',
     tag: '20240703',
     build_args: '--no-cache',
     category: 'tool'
     }

runs_on_agents:
  - {nodeLabel: 'beni09', category: 'base'}

matrix:
  axes:
    flags:
      - default
    arch:
      - x86_64
      - aarch64
      - ppc64le

env:
  jenkins_opt_artifacts: 'none'

steps:
  - name: Setup
    run: |
      set +x
      echo
      echo "======================================================"
      echo "name: ${name}"
      echo "arch: ${arch}"
      echo "url: ${uri}"
      echo "tag: ${tag}"
      echo "flags: ${flags}"
      echo "variant: ${variant}"
      echo "======================================================"
      echo
    parallel: false

  - name: Copyrights
    enable: ${do_copyrights}
    run: env WORKSPACE=$PWD ./contrib/jenkins_tests/copyrights.sh
    containerSelector:
      - "{name: 'header-check', category: 'tool', variant: 1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts: '*.log,*.tar.gz'
    parallel: false

  - name: Autogen
    run: |
      ./autogen.sh -s
    parallel: false

  - name: Build
    enable: ${do_build}
    containerSelector:
      - "{category: 'base'}"
    agentSelector:
      - "{category: 'base'}"
    run: |
      [ "x${do_build}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_build=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Service
    enable: ${do_service}
    containerSelector:
      - "{category: 'base', variant:1}"
    agentSelector:
      - "{category: 'base', variant:1}"
    run: |
      [ "x${do_service}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_tool=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Package
    enable: ${do_package}
    containerSelector:
      - "{category: 'base'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_package}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_rpm=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Release
    enable: ${do_release}
    containerSelector:
      - "{name: 'rhel8.3-mofed-x86_64', category: 'base', variant: 1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      env WORKSPACE=$PWD .ci/do_release.sh ${release_folder}
  - name: Antivirus
    enable: ${do_antivirus}
    containerSelector:
      - "{name: 'rhel8.3-mofed-x86_64', category: 'base', variant: 1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      env WORKSPACE=$PWD .ci/antivirus.sh ${release_folder}
    archiveArtifacts: 'logs/'

  - name: Style
    enable: ${do_style}
    containerSelector:
      - "{name: 'xlio_static.tidy', category: 'tool', variant: 1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_style}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_style=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Compiler
    enable: ${do_compiler}
    containerSelector:
      - "{name: 'toolbox', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_compiler}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_compiler=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Coverity
    enable: ${do_coverity}
    credentialsId: '925b0900-e273-4042-bc7c-facaefae0727'
    containerSelector:
      - "{name: 'toolbox', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_coverity}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_cov=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz,
      jenkins/**/output/errors/**/*.html
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Cppcheck
    enable: ${do_cppcheck}
    containerSelector:
      - "{name: 'xlio_static.cppcheck', category: 'tool', variant: 1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_cppcheck}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_cppcheck=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Csbuild
    enable: ${do_csbuild}
    containerSelector:
      - "{name: 'xlio_static.csbuild', category: 'tool', variant: 1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_csbuild}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_csbuild=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Tidy
    enable: ${do_tidy}
    containerSelector:
      - "{name: 'xlio_static.tidy', category: 'tool', variant: 1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_tidy}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_tidy=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Test
    enable: ${do_test}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09'}"
    run: |
      [ "x${do_test}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_run=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Gtest
    enable: ${do_gtest}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09'}"
    run: |
      [ "x${do_gtest}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_gtest=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap
    archiveJunit-onfail: |
      jenkins/**/*.xml

  - name: Valgrind
    enable: ${do_valgrind}
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09'}"
    run: |
      [ "x${do_valgrind}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_vg=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz,
      jenkins/**/vg/*valgrind*.log
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Commit
    enable: ${do_commit}
    containerSelector:
      - "{name: 'toolbox', category: 'tool', variant:1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_commit}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_commit=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveTap-onfail: |
      jenkins/**/*.tap

  - name: Artifacts
    enable: ${do_artifact}
    run: |
      ./.ci/artifacts.sh
    parallel: false
    archiveArtifacts: |
      jenkins/**/arch-*.tar.gz
    archiveTap: |
      jenkins/**/*.tap
    archiveJunit: |
      jenkins/**/*.xml

  - name: Blackduck
    enable: ${do_blackduck}
    containerSelector:
      - "{name: 'blackduck', category:'tool', variant:1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    shell: action
    module: ngci
    run: NGCIBlackDuckScan
    args:
      projectName: "libxlio"
      projectVersion: "0.1.0"
      projectSrcPath: "src"
      attachArtifact: true
      reportName: "BlackDuck report"
      scanMode: "source"
    env:
      SPRING_APPLICATION_JSON: '{"blackduck.url":"https://blackduck.mellanox.com/","blackduck.api.token":"ODMwOWYwMzEtODA2ZC00MzBjLWI1ZDEtNmFiMjBkYzQzMzkwOjNmNjExN2M1LWE2ZmEtNDZlYS1hZjRiLTZlNDgwNjAwOTVjNw=="}'

pipeline_start:
  run: |
    printenv
    echo "Start"

pipeline_stop:
  run: |
    echo "Finish"

failFast: false

taskName: '${flags}/${name}/${axis_index}'
