---
job: LIBXLIO

step_allow_single_selector: false

registry_host: harbor.mellanox.com
registry_auth: swx-infra_harbor_credentials
registry_path: /swx-infra/media

kubernetes:
  privileged: true
  cloud: swx-k8s-spray
  nodeSelector: 'beta.kubernetes.io/os=linux'
  namespace: xlio-ci
  limits: '{memory: 10Gi, cpu: 10000m}'
  requests: '{memory: 10Gi, cpu: 10000m}'

credentials:
  - {credentialsId: 'media_coverity_credentials', usernameVariable: 'XLIO_COV_USER', passwordVariable: 'XLIO_COV_PASSWORD'}
  - {credentialsId: 'mellanox_github_credentials', usernameVariable: 'MELLANOX_GH_USER', passwordVariable: 'MELLANOX_GH_TOKEN'}

volumes:
  - {mountPath: /hpc/local/bin, hostPath: /hpc/local/bin}
  - {mountPath: /hpc/local/oss, hostPath: /hpc/local/oss}
  - {mountPath: /hpc/local/oss/xlio, hostPath: /hpc/local/oss/xlio}
  - {mountPath: /auto/sw_tools/Commercial, hostPath: /auto/sw_tools/Commercial}
  - {mountPath: /hpc/local/commercial, hostPath: /hpc/local/commercial}
  - {mountPath: /hpc/local/etc/modulefiles, hostPath: /hpc/local/etc/modulefiles}
  # for Antivirus
  - {mountPath: /auto/BACKUP/logs_of_LOGS, hostPath: /auto/BACKUP/logs_of_LOGS}
  - {mountPath: /auto/GLIT/SCRIPTS/HELPERS, hostPath: /auto/GLIT/SCRIPTS/HELPERS}
  # Default release location
  - {mountPath: /auto/sw/release/sw_acceleration, hostPath: /auto/sw/release/sw_acceleration}
  # User profile for release
  - {mountPath: /var/home/swx-jenkins, hostPath: /labhome/swx-jenkins}

runs_on_dockers:
# build
  - {
      file: '.ci/dockerfiles/Dockerfile.ubuntu22.04',
      arch: 'x86_64',
      name: 'ubuntu22.04',
      uri: 'xlio/$arch/$name/build',
      tag: '20240813',
      build_args: '--no-cache --target build',
      category: 'base'
    }
  - {
      file: '.ci/dockerfiles/Dockerfile.ubuntu22.04',
      arch: 'aarch64',
      name: 'ubuntu22.04',
      uri: 'xlio/$arch/ubuntu22.04/build',
      tag: '20240813',
      build_args: '--target build --no-cache --build-arg ARCH=aarch64 --build-arg REPO_ARCH=arm64',
      category: 'base'
    }
# tool
  - {
     file: '.ci/dockerfiles/Dockerfile.ubuntu22.04',
     arch: 'x86_64',
     name: 'toolbox',
     uri: 'xlio/$arch/ubuntu22.04/$name',
     tag: '20240813',
     build_args: '--no-cache --target toolbox',
     category: 'tool'
    }
  - {name: 'blackduck', url: 'harbor.mellanox.com/toolbox/blackduck_post_scan', category: 'tool', arch: 'x86_64'}
  - {name: 'header-check', url: 'harbor.mellanox.com/toolbox/header_check:0.0.51', category: 'tool', arch: 'x86_64', tag: '0.0.51'}
# static tests
  - {
     file: '.ci/dockerfiles/Dockerfile.ubuntu22.04',
     arch: 'x86_64',
     name: 'static',
     uri: 'xlio/$arch/ubuntu22.04/$name',
     tag: '20240813',
     build_args: '--no-cache --target static',
     category: 'tool'
    }
# tests
  - {
      file: '.ci/dockerfiles/Dockerfile.ubuntu22.04',
      arch: 'x86_64',
      name: 'test',
      uri: 'xlio/$arch/ubuntu22.04/$name',
      tag: '20240813',
      build_args: '--no-cache --target test',
      category: 'tests',
      annotations: [{ key: 'k8s.v1.cni.cncf.io/networks', value: 'sriov-cx6dx-p1' }],
      limits: '{memory: 10Gi, cpu: 8000m, hugepages-2Mi: 10Gi, mellanox.com/sriov_cx6dx_p1: 1}',
      requests: '{memory: 10Gi, cpu: 8000m, hugepages-2Mi: 10Gi, mellanox.com/sriov_cx6dx_p1: 1}',
      caps_add: '[ IPC_LOCK, SYS_RESOURCE ]',
      runAsUser: '0',
      runAsGroup: '0'
    }
  - {
     file: '.ci/dockerfiles/Dockerfile.ubuntu22.04',
     arch: 'x86_64',
     name: 'vg',
     uri: 'xlio/$arch/ubuntu22.04/$name',
     tag: '20240813',
     build_args: '--no-cache --target vg',
     category: 'tool',
     annotations: [{ key: 'k8s.v1.cni.cncf.io/networks', value: 'sriov-cx6dx-p2' }],
     limits: '{memory: 10Gi, cpu: 8000m, hugepages-2Mi: 10Gi, mellanox.com/sriov_cx6dx_p2: 1}',
     requests: '{memory: 10Gi, cpu: 8000m, hugepages-2Mi: 10Gi, mellanox.com/sriov_cx6dx_p2: 1}',
     caps_add: '[ IPC_LOCK, SYS_RESOURCE ]',
     runAsUser: '0',
     runAsGroup: '0'
    }
  - {
     file: '.ci/dockerfiles/Dockerfile.ubuntu22.04',
     arch: 'x86_64',
     name: 'gtest',
     uri: 'xlio/$arch/ubuntu22.04/$name',
     tag: '20240813',
     build_args: '--no-cache --target gtest',
     category: 'tests',
     annotations: [{ key: 'k8s.v1.cni.cncf.io/networks', value: 'sriov-cx6dx-p1@net1,sriov-cx6dx-p2@net2' }],
     limits: '{memory: 8Gi, cpu: 8000m, hugepages-2Mi: 8Gi, mellanox.com/sriov_cx6dx_p1: 1, mellanox.com/sriov_cx6dx_p2: 1}',
     requests: '{memory: 8Gi, cpu: 8000m, hugepages-2Mi: 8Gi, mellanox.com/sriov_cx6dx_p1: 1, mellanox.com/sriov_cx6dx_p2: 1}',
     caps_add: '[ IPC_LOCK, SYS_RESOURCE ]',
     runAsUser: '0',
     runAsGroup: '0'
    }

matrix:
  axes:
    flags:
      - default
    arch:
      - x86_64
      - aarch64
      - ppc64le

env:
  jenkins_opt_artifacts: 'none'
  COMPILE_DOCA: true
  COMPILE_DPCP: true

steps:
  - name: Setup
    run: |
      set +x
      echo
      echo "======================================================"
      echo "name: ${name}"
      echo "arch: ${arch}"
      echo "url: ${uri}"
      echo "tag: ${tag}"
      echo "flags: ${flags}"
      echo "variant: ${variant}"
      echo "======================================================"
      echo
    parallel: false

  - name: Copyrights
    enable: ${do_copyrights}
    credentialsId: 'mellanox_github_credentials'
    run: env WORKSPACE=$PWD COMPILE_DOCA=false COMPILE_DPCP=false GITHUB_TOKEN=$MELLANOX_GH_TOKEN ./contrib/jenkins_tests/copyrights.sh
    containerSelector:
      - "{name: 'header-check', category: 'tool', variant: 1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts: '*.log,*.tar.gz'
    parallel: false

  - name: Autogen
    run: |
      ./autogen.sh -s
    parallel: false

  - name: Build
    enable: ${do_build}
    run: |
      [ "x${do_build}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_build=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Service
    enable: ${do_service}
    containerSelector:
      - "{category: 'base'}"
    run: |
      [ "x${do_service}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_tool=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Package
    enable: ${do_package}
    containerSelector:
      - "{category: 'base'}"
    run: |
      [ "x${do_package}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_rpm=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  # - name: Release
  #   enable: ${do_release}
  #   containerSelector:
  #     - "{name: 'rhel8.3-mofed-x86_64', category: 'base', variant: 1}"
  #   agentSelector:
  #     - "{nodeLabel: 'skip-agent'}"
  #   run: |
  #     env WORKSPACE=$PWD .ci/do_release.sh ${release_folder}
  # - name: Antivirus
  #   enable: ${do_antivirus}
  #   containerSelector:
  #     - "{name: 'rhel8.3-mofed-x86_64', category: 'base', variant: 1}"
  #   agentSelector:
  #     - "{nodeLabel: 'skip-agent'}"
  #   run: |
  #     env WORKSPACE=$PWD .ci/antivirus.sh ${release_folder}
  #   archiveArtifacts: 'logs/'

  - name: Style
    enable: ${do_style}
    containerSelector:
      - "{name: 'toolbox', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_style}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_style=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Compiler
    enable: ${do_compiler}
    containerSelector:
      - "{name: 'toolbox', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_compiler}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_compiler=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Coverity
    enable: ${do_coverity}
    credentialsId: 'media_coverity_credentials'
    containerSelector:
      - "{name: 'toolbox', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_coverity}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_cov=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz,
      jenkins/**/output/errors/**/*.html

  - name: Cppcheck
    enable: ${do_cppcheck}
    containerSelector:
      - "{name: 'static', category: 'tool'}"
    run: |
      [ "x${do_cppcheck}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_cppcheck=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Csbuild
    enable: ${do_csbuild}
    containerSelector:
      - "{name: 'static', category: 'tool'}"
    run: |
      [ "x${do_csbuild}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} COMPILE_DOCA=false COMPILE_DPCP=false jenkins_test_csbuild=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Test
    enable: ${do_test}
    containerSelector:
      - "{name: 'test', category: 'tests'}"
    run: |
      [ "x${do_test}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_run=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Gtest
    enable: ${do_gtest}
    containerSelector:
      - "{name: 'gtest', category: 'tests'}"
    run: |
      [ "x${do_gtest}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_gtest=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz
    archiveJunit-onfail: |
      jenkins/**/*.xml

  - name: Valgrind
    enable: ${do_valgrind}
    containerSelector:
      - "{name: 'vg', category: 'tool'}"
    run: |
      [ "x${do_valgrind}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_vg=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz,
      jenkins/**/vg/*valgrind*.log

  - name: Commit
    enable: ${do_commit}
    containerSelector:
      - "{name: 'toolbox', category: 'tool', variant:1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    run: |
      [ "x${do_commit}" == "xtrue" ] && action=yes || action=no
      env WORKSPACE=$PWD TARGET=${flags} jenkins_test_commit=${action} ./contrib/test_jenkins.sh
    parallel: false
    onfail: |
      ./.ci/artifacts.sh
    archiveArtifacts-onfail: |
      jenkins/**/arch-*.tar.gz

  - name: Artifacts
    enable: ${do_artifact}
    run: |
      ./.ci/artifacts.sh
    parallel: false
    archiveArtifacts: |
      jenkins/**/arch-*.tar.gz
    archiveJunit: |
      jenkins/**/*.xml

  - name: Blackduck
    enable: ${do_blackduck}
    containerSelector:
      - "{name: 'blackduck', category:'tool', variant:1}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    shell: action
    module: ngci
    run: NGCIBlackDuckScan
    args:
      projectName: "libxlio"
      projectVersion: "${sha1}"
      projectSrcPath: "src"
      attachArtifact: true
      reportName: "BlackDuck report"
      scanMode: "source"
      skipDockerDaemonCheck: true
      credentialsId: "swx-jenkins3-svc_git-nbu_token"
    env:
      SPRING_APPLICATION_JSON: '{"blackduck.url":"https://blackduck.mellanox.com/","blackduck.api.token":"ODMwOWYwMzEtODA2ZC00MzBjLWI1ZDEtNmFiMjBkYzQzMzkwOjNmNjExN2M1LWE2ZmEtNDZlYS1hZjRiLTZlNDgwNjAwOTVjNw=="}'

pipeline_start:
  run: |
    printenv
    echo "Start"

pipeline_stop:
  run: |
    echo "Finish"

failFast: false

taskName: '${flags}/${arch}/${name}/${axis_index}'
